// <auto-generated />
using System;
using Bipki.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Bipki.Database.Migrations
{
    [DbContext(typeof(BipkiContext))]
    [Migration("20250518100314_add polls")]
    partial class addpolls
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "public", "activity_type", new[] { "lecture", "workshop" });
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Bipki.Database.Models.BusinessModels.Activity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("ChatId")
                        .HasColumnType("uuid")
                        .HasColumnName("chat_id");

                    b.Property<Guid>("ConferenceId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("deleted");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<DateTime>("EndsAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ends_at");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<string>("Recording")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("recording");

                    b.Property<DateTime>("StartsAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("starts_at");

                    b.Property<int>("TotalParticipants")
                        .HasColumnType("integer");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.Property<string>("TypeLabel")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("type_label");

                    b.HasKey("Id")
                        .HasName("activities_pkey");

                    b.HasIndex("ChatId")
                        .IsUnique();

                    b.HasIndex("ConferenceId");

                    b.HasIndex("StartsAt")
                        .HasDatabaseName("IX_activities_starts_at");

                    b.ToTable("activities", null, t =>
                        {
                            t.HasCheckConstraint("CK_activities_type_Enum", "type IN (0, 1)");
                        });
                });

            modelBuilder.Entity("Bipki.Database.Models.BusinessModels.ActivityRegistration", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ActivityId")
                        .HasColumnType("uuid")
                        .HasColumnName("activity_id");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean")
                        .HasColumnName("deleted");

                    b.Property<bool>("NotificationEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("RegisteredAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("registered_at");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<bool>("Verified")
                        .HasColumnType("boolean");

                    b.HasKey("Id")
                        .HasName("activity_registration_pkey");

                    b.HasIndex("ActivityId");

                    b.HasIndex("UserId");

                    b.ToTable("activity_registrations", (string)null);
                });

            modelBuilder.Entity("Bipki.Database.Models.BusinessModels.Chat", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("chat_pkey");

                    b.ToTable("chat", null, t =>
                        {
                            t.HasCheckConstraint("CK_chat_type_Enum", "type IN (0, 1)");
                        });
                });

            modelBuilder.Entity("Bipki.Database.Models.BusinessModels.ChatUser", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<Guid>("ChatId")
                        .HasColumnType("uuid")
                        .HasColumnName("chat_id");

                    b.HasKey("UserId", "ChatId")
                        .HasName("chat_user_pkey");

                    b.HasIndex("ChatId");

                    b.ToTable("chat_user", (string)null);
                });

            modelBuilder.Entity("Bipki.Database.Models.BusinessModels.Conference", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("ChatId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("deleted");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("end_date");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("location");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<string>("Plan")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("floor_plan");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_date");

                    b.HasKey("Id")
                        .HasName("conferences_pkey");

                    b.HasIndex("ChatId")
                        .IsUnique();

                    b.ToTable("conferences", (string)null);
                });

            modelBuilder.Entity("Bipki.Database.Models.BusinessModels.Message", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("ChatId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("SenderId")
                        .HasColumnType("uuid")
                        .HasColumnName("sender_id");

                    b.Property<string>("SenderName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("sender_name");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("text");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("timestamp");

                    b.HasKey("Id")
                        .HasName("message_pkey");

                    b.HasIndex("ChatId");

                    b.ToTable("messages", (string)null);
                });

            modelBuilder.Entity("Bipki.Database.Models.BusinessModels.Poll", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("ChatId")
                        .HasColumnType("uuid")
                        .HasColumnName("chat_id");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("timestamp");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.HasKey("Id");

                    b.HasIndex("ChatId");

                    b.ToTable("polls", (string)null);
                });

            modelBuilder.Entity("Bipki.Database.Models.BusinessModels.PollOption", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("PollId")
                        .HasColumnType("uuid")
                        .HasColumnName("poll_id");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("text");

                    b.HasKey("Id");

                    b.HasIndex("PollId");

                    b.ToTable("poll_options", (string)null);
                });

            modelBuilder.Entity("Bipki.Database.Models.BusinessModels.Vote", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("PollOptionId")
                        .HasColumnType("uuid")
                        .HasColumnName("poll_option_id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("PollOptionId");

                    b.HasIndex("UserId");

                    b.ToTable("votes", (string)null);
                });

            modelBuilder.Entity("Bipki.Database.Models.BusinessModels.WaitListEntry", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ActivityId")
                        .HasColumnType("uuid")
                        .HasColumnName("activity_id");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean")
                        .HasColumnName("deleted");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<DateTime>("WaitsSince")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("waits_since");

                    b.HasKey("Id")
                        .HasName("wait_list_entry_pkey");

                    b.HasIndex("UserId");

                    b.HasIndex("ActivityId", "WaitsSince")
                        .HasDatabaseName("IX_wait_list_entries_activity_id_waits_since");

                    b.ToTable("wait_list_entries", (string)null);
                });

            modelBuilder.Entity("Bipki.Database.Models.UserModels.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("4bcb87c6-3320-4de0-8e7c-c6765a08916b"),
                            Name = "User",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = new Guid("5e2b6f6f-a877-46ca-9b82-cc7d6a4118d5"),
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Bipki.Database.Models.UserModels.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<bool>("CheckedIn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("checked_in");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<Guid?>("ConferenceId")
                        .HasColumnType("uuid")
                        .HasColumnName("conference_id");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("surname");

                    b.Property<string>("Telegram")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("telegram");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("7e0ca8d7-841b-4f0d-92e8-64ed6dd9805a"),
                            AccessFailedCount = 0,
                            CheckedIn = false,
                            ConcurrencyStamp = "d5f156dc-4085-42d9-8d7c-6bcad864c174",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "admin",
                            NormalizedUserName = "ADMIN",
                            PhoneNumberConfirmed = false,
                            Surname = "admin",
                            Telegram = "adminTg",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("7e0ca8d7-841b-4f0d-92e8-64ed6dd9805a"),
                            RoleId = new Guid("5e2b6f6f-a877-46ca-9b82-cc7d6a4118d5")
                        },
                        new
                        {
                            UserId = new Guid("7e0ca8d7-841b-4f0d-92e8-64ed6dd9805a"),
                            RoleId = new Guid("4bcb87c6-3320-4de0-8e7c-c6765a08916b")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Bipki.Database.Models.BusinessModels.Activity", b =>
                {
                    b.HasOne("Bipki.Database.Models.BusinessModels.Chat", "Chat")
                        .WithOne("Activity")
                        .HasForeignKey("Bipki.Database.Models.BusinessModels.Activity", "ChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("activities_chat_id_fkey");

                    b.HasOne("Bipki.Database.Models.BusinessModels.Conference", "Conference")
                        .WithMany("Program")
                        .HasForeignKey("ConferenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("activities_conference_id_fkey");

                    b.Navigation("Chat");

                    b.Navigation("Conference");
                });

            modelBuilder.Entity("Bipki.Database.Models.BusinessModels.ActivityRegistration", b =>
                {
                    b.HasOne("Bipki.Database.Models.BusinessModels.Activity", "Activity")
                        .WithMany("ActivityRegistrations")
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("activity_registrations_activity_id_fkey");

                    b.HasOne("Bipki.Database.Models.UserModels.User", "User")
                        .WithMany("ActivityRegistrations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("activity_registrations_user_id_fkey");

                    b.Navigation("Activity");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Bipki.Database.Models.BusinessModels.ChatUser", b =>
                {
                    b.HasOne("Bipki.Database.Models.BusinessModels.Chat", "Chat")
                        .WithMany()
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("chat_user_chat_id_fkey");

                    b.HasOne("Bipki.Database.Models.UserModels.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("chat_user_user_id_fkey");

                    b.Navigation("Chat");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Bipki.Database.Models.BusinessModels.Conference", b =>
                {
                    b.HasOne("Bipki.Database.Models.BusinessModels.Chat", "Chat")
                        .WithOne("Conference")
                        .HasForeignKey("Bipki.Database.Models.BusinessModels.Conference", "ChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("activities_chat_id_fkey");

                    b.Navigation("Chat");
                });

            modelBuilder.Entity("Bipki.Database.Models.BusinessModels.Message", b =>
                {
                    b.HasOne("Bipki.Database.Models.BusinessModels.Chat", "Chat")
                        .WithMany("Messages")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("messages_chat_id_fkey");

                    b.Navigation("Chat");
                });

            modelBuilder.Entity("Bipki.Database.Models.BusinessModels.Poll", b =>
                {
                    b.HasOne("Bipki.Database.Models.BusinessModels.Chat", "Chat")
                        .WithMany("Polls")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("polls_chat_id_fkey");

                    b.Navigation("Chat");
                });

            modelBuilder.Entity("Bipki.Database.Models.BusinessModels.PollOption", b =>
                {
                    b.HasOne("Bipki.Database.Models.BusinessModels.Poll", "Poll")
                        .WithMany("PollOptions")
                        .HasForeignKey("PollId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("poll_options_poll_id_fkey");

                    b.Navigation("Poll");
                });

            modelBuilder.Entity("Bipki.Database.Models.BusinessModels.Vote", b =>
                {
                    b.HasOne("Bipki.Database.Models.BusinessModels.PollOption", "PollOption")
                        .WithMany("Votes")
                        .HasForeignKey("PollOptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("vote_poll_option_id_fkey");

                    b.HasOne("Bipki.Database.Models.UserModels.User", "User")
                        .WithMany("Votes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("votes_user_id_fkey");

                    b.Navigation("PollOption");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Bipki.Database.Models.BusinessModels.WaitListEntry", b =>
                {
                    b.HasOne("Bipki.Database.Models.BusinessModels.Activity", "Activity")
                        .WithMany("WaitList")
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("wait_list_entries_activity_id_fkey");

                    b.HasOne("Bipki.Database.Models.UserModels.User", "User")
                        .WithMany("WaitLists")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("wait_list_entries_user_id_fkey");

                    b.Navigation("Activity");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Bipki.Database.Models.UserModels.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("Bipki.Database.Models.UserModels.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("Bipki.Database.Models.UserModels.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Bipki.Database.Models.UserModels.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Bipki.Database.Models.UserModels.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("Bipki.Database.Models.UserModels.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Bipki.Database.Models.BusinessModels.Activity", b =>
                {
                    b.Navigation("ActivityRegistrations");

                    b.Navigation("WaitList");
                });

            modelBuilder.Entity("Bipki.Database.Models.BusinessModels.Chat", b =>
                {
                    b.Navigation("Activity")
                        .IsRequired();

                    b.Navigation("Conference")
                        .IsRequired();

                    b.Navigation("Messages");

                    b.Navigation("Polls");
                });

            modelBuilder.Entity("Bipki.Database.Models.BusinessModels.Conference", b =>
                {
                    b.Navigation("Program");
                });

            modelBuilder.Entity("Bipki.Database.Models.BusinessModels.Poll", b =>
                {
                    b.Navigation("PollOptions");
                });

            modelBuilder.Entity("Bipki.Database.Models.BusinessModels.PollOption", b =>
                {
                    b.Navigation("Votes");
                });

            modelBuilder.Entity("Bipki.Database.Models.UserModels.User", b =>
                {
                    b.Navigation("ActivityRegistrations");

                    b.Navigation("Votes");

                    b.Navigation("WaitLists");
                });
#pragma warning restore 612, 618
        }
    }
}
